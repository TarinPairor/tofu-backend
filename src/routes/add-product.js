const express = require('express');
const router = express.Router();
const { createClient } = require('@supabase/supabase-js');
const { scrapeContent } = require('../utils/scraper');

// Initialize Supabase client
const supabaseUrl = 'https://zbzioinhmaciqqskgejo.supabase.co';
const supabaseKey = process.env.SUPABASE_KEY;
const supabase = createClient(supabaseUrl, supabaseKey);

/**
 * Schema for tofu_product table:
 * 
 * create table public.tofu_product (
 *   id bigint generated by default as identity not null,
 *   created_at timestamp with time zone not null default now(),
 *   product_name text null,
 *   user_id bigint not null,
 *   sustainability_level text null,
 *   product_link text null,
 *   product_image text null,
 *   product_description text null,
 *   constraint tofu_product_pkey primary key (id),
 *   constraint tofu_product_user_id_fkey foreign KEY (user_id) references tofu_user (id) on delete CASCADE
 * ) TABLESPACE pg_default;
 */

router.post('/', async (req, res) => {
  try {
    const { url, user_id } = req.body;
    if (!url || !user_id) {
      return res.status(400).json({ 
        success: false, 
        error: 'URL and user_id are required' 
      });
    }

    // First check if product already exists for this user
    const { data: existingProduct } = await supabase
      .from('tofu_product')
      .select('*')
      .eq('product_link', url)
      .eq('user_id', user_id)
      .single();

    if (existingProduct) {
      return res.json({
        success: true,
        data: existingProduct,
        message: 'Product already exists in database for this user'
      });
    }

    // Scrape product information
    const productInfo = await scrapeContent(url);
    const parsedProductInfo = JSON.parse(productInfo);

    // Insert into Supabase
    const { data: newProduct, error } = await supabase
      .from('tofu_product')
      .insert([
        {
          product_name: parsedProductInfo.productName,
          user_id: user_id,
          sustainability_level: "",
          product_link: url,
          product_image: null, // TODO: Add image scraping if needed
          product_description: parsedProductInfo.description
        }
      ])
      .select()
      .single();

    if (error) {
      console.error('Supabase error:', error);
      throw new Error(`Failed to insert product: ${error.message}`);
    }

    res.json({
      success: true,
      data: newProduct,
      message: 'Product added successfully'
    });

  } catch (error) {
    console.error('Add product error:', error);
    res.status(500).json({ 
      success: false,
      error: 'Failed to add product',
      details: error.message
    });
  }
});

module.exports = router; 